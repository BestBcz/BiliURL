name: AutoBuild

on:
  workflow_dispatch:
  schedule:
    - cron: "0 04 * * *"  # 每天北京时间 12:00（UTC+8）

permissions:
  contents: write

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  autobuild:
    name: AutoBuild & Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ✅ 获取完整历史，便于 changelog 分析

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Extract version from Gradle
        id: version
        run: |
          VERSION=$(grep -E '^version\s*=' build.gradle.kts | head -n1 | sed -E 's/.*"(.+)"$/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Detect meaningful changes
        id: check
        run: |
          git fetch origin master --depth=2

          HEAD_HASH=$(git rev-parse HEAD)
          PARENT_HASH=$(git rev-parse HEAD^ 2>/dev/null || echo "")

          if [[ -z "$PARENT_HASH" ]]; then
            echo "Only one commit found. Skipping."
            echo "should_build=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          CHANGED=$(git diff --name-only "$PARENT_HASH" "$HEAD_HASH")
          echo "Changed files:"
          echo "$CHANGED"

          if echo "$CHANGED" | grep -qE 'build.gradle.kts|src/|BiliVideoParser.kt'; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop if no meaningful changes
        if: steps.check.outputs.should_build == 'false'
        run: echo "No changes detected. Skipping autobuild."

      - name: Build project
        if: steps.check.outputs.should_build == 'true'
        run: |
          chmod +x ./gradlew
          ./gradlew build

      - name: Generate changelog
        if: steps.check.outputs.should_build == 'true'
        run: |
          echo "## AutoBuild Changelog" > release_notes.md
          echo "" >> release_notes.md

          COMMITS=$(git log -n 10 --pretty=format:"%s (%an)" | grep -v 'dependabot')

          NEW=""
          FIXED=""
          REFACTOR=""
          DOCS=""
          IMPROVED=""
          OTHER=""

          while IFS= read -r line; do
            if [[ "$line" == feat:* ]]; then
              NEW+=$'- '"${line#feat: }"$'\n'
            elif [[ "$line" == fix:* ]]; then
              FIXED+=$'- '"${line#fix: }"$'\n'
            elif [[ "$line" == refactor:* ]]; then
              REFACTOR+=$'- '"${line#refactor: }"$'\n'
            elif [[ "$line" == docs:* ]]; then
              DOCS+=$'- '"${line#docs: }"$'\n'
            elif [[ "$line" == style:* || "$line" == perf:* ]]; then
              IMPROVED+=$'- '"${line#*: }"$'\n'
            else
              OTHER+=$'- '"${line}"$'\n'
            fi
          done <<< "$COMMITS"

          [[ -n "$NEW" ]] && echo -e "### New\n$NEW" >> release_notes.md
          [[ -n "$FIXED" ]] && echo -e "### Fixed\n$FIXED" >> release_notes.md
          [[ -n "$REFACTOR" ]] && echo -e "### Refactor\n$REFACTOR" >> release_notes.md
          [[ -n "$DOCS" ]] && echo -e "### Documentation\n$DOCS" >> release_notes.md
          [[ -n "$IMPROVED" ]] && echo -e "### Improved\n$IMPROVED" >> release_notes.md
          [[ -n "$OTHER" ]] && echo -e "### Other Changes\n$OTHER" >> release_notes.md

          cat release_notes.md

      - name: Publish to `autobuild-latest`
        if: steps.check.outputs.should_build == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: autobuild-latest  # ✅ 始终覆盖这个 tag
          name: "Autobuild Latest"
          body_path: release_notes.md
          files: build/libs/*.jar
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
